<?xml version="1.0"?>
<entry type="method" name="add" return="jQuery">
  <title>.add()</title>
  <signature>
    <added>1.0</added>
    <argument name="selector" type="Selector">
      <desc>通过一个字符串表示的选择器表达式，找到更多的元素，并将其添加到匹配的元素集合。</desc>
    </argument>
  </signature>
  <signature>
    <added>1.0</added>
    <argument name="elements" type="Elements">
      <desc>将一个或多个元素添加到匹配的元素集合。</desc>
    </argument>
  </signature>
  <signature>
    <added>1.0</added>
    <argument name="html" type="htmlString">
      <desc>将HTML片段添加到匹配的元素集合。</desc>
    </argument>
  </signature>
  <signature>
    <added>1.3.2</added>
    <argument name="jQuery object" type="jQuery object ">
      <desc>将一个现有的jQuery对象添加到匹配的元素集合。</desc>
    </argument>
  </signature>
  <signature>
    <added>1.4</added>
    <argument name="selector" type="Selector">
      <desc>通过一个字符串表示的选择器表达式，找到更多的元素，并将其添加到匹配的元素集合。</desc>
    </argument>
    <argument name="context" type="Element">
      <desc>为选择器在文档中指定一个起点，并从此起点开始查找元素；类似<code>$(selector, context)</code>方法的context（上下文)参数。</desc>
    </argument>
  </signature>
  <desc>添加元素到匹配的元素集合。</desc>
  <longdesc>
    <p>鉴于一个jQuery对象，表示一个DOM元素的集合，<code>.add()</code>方法将已经包含的元素和通过参数传递过来的元素联合在一起，构造出一个新的jQuery对象。 <code>.add()</code>方法的参数几乎可以接受任何的<code>$()</code>，包括一个jQuery选择器表达式、DOM元素的引用或HTML片段。</p>
    <p>不要假设此方法会按照传递给<code>.add()</code>方法的参数的顺序添加到已经存在的集合中。如果所有元素都属于同一个文档，<code>.add()</code>方法所返回的集合将会按照元素在文档中出现的位置进行排序；也就是说，按照每个元素在文档中出现的顺序。如果集合中包含不同文档或不属于任何文档的元素，最后的排序方式未定义（undefined）。为了创建一个包含已定义顺序顺序的jQuery对象，请使用<code>$(array_of_DOM_elements)</code>。</p>
    <p>更新之后的元素集合可以使用下面的（链式）调用方法，或者分配给一个变量供以后使用。例如：</p>
    <pre><code>
$( "p" ).add( "div" ).addClass( "widget" );
var pdiv = $( "p" ).add( "div" );
    </code></pre>
    <p>下面将<em>不会</em>保存添加的元素，因为在<code>.add()</code>方法创建一个新集合，并保持原集合pdiv不变：</p>
    <pre><code>
var pdiv = $( "p" );
pdiv.add( "div" ); // 错误，pdiv不会改变
    </code></pre>
    <p>考虑一个面页中包含一个简单的列表和它之后的一个段落：</p>
    <pre><code>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a paragraph&lt;/p&gt;
    </code></pre>
    <p>我们可以选择列表，然后通过使用一个选择器或引用的DOM元素本身作为<code>.add()</code> 方法的参数，将段落添加到列表中：</p>
    <pre><code>
$( "li" ).add( "p" ).css( "background-color", "red" );
    </code></pre>
    <p>或者：</p>
    <pre><code>
$( "li" ).add( document.getElementsByTagName( "p" )[ 0 ] )
  .css( "background-color", "red" );
    </code></pre>
    <p>该调用的结果是四个元素的红色背景。使用片一个HTML段作为<code>.add()</code>方法的参数（如在第三个版本），我们可以在动态的创建额外的元素，添加这些元素到匹配的元素集合中。例如，我们可以改变新创建的段落和列表项的背景：</p>
    <pre><code>
$( "li" ).add( "&lt;p id='new'&gt;new paragraph&lt;/p&gt;" )
  .css( "background-color", "red" );
    </code></pre>
    <p>虽然已经创建新的段落，并且改变其背景颜色，但是它仍然没有出现在页面上。要想在页面上显示该段落，我们需要在链式方式中使用 jQuery 的插入方法。</p>
    <p>在jQuery 1.4结果从.add()将总是返回文档顺序（而不是一个简单的串联）。</p>
    <p><strong>注意：</strong> 要使用<code>.add()</code>相反的方法，您可以使用<a href="http://api.jquery.com/not"><code>.not( elements | selector )</code></a> 从jQuery返回中移除元素，或使用<a href="http://api.jquery.com/end"><code>.end()</code></a>返回到添加之前的选择（集合）。 </p>
  </longdesc>
  <example>
    <desc>查找所有的 div，并为其添加一个边框。然后将所有的段落添加到 jQuery 对象中，并将它们的背景色变成黄色。</desc>
    <code><![CDATA[
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );
]]></code>
    <css><![CDATA[
  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }
]]></css>
    <html><![CDATA[
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>

<p>Added this... (notice no border)</p>
]]></html>
  </example>
  <example>
    <desc>根据给定的表达式，向匹配的元素集合中添加一些元素。</desc>
    <code><![CDATA[
$( "p" ).add( "span" ).css( "background", "yellow" );
]]></code>
    <html><![CDATA[
<p>Hello</p>
<span>Hello Again</span>
]]></html>
  </example>
  <example>
    <desc>将动态生成的元素添加到匹配的元素集合中。</desc>
    <code><![CDATA[
$( "p" ).clone().add( "<span>Again</span>" ).appendTo( document.body );
]]></code>
    <html><![CDATA[
<p>Hello</p>
]]></html>
  </example>
  <example>
    <desc>向匹配的元素集合中添加一个或多个Element对象。</desc>
    <code><![CDATA[
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );
]]></code>
    <html><![CDATA[
<p>Hello</p>
<span id="a">Hello Again</span>
]]></html>
  </example>
  <example>
    <desc>以下示例展示了如何向一个已经存在的集合中添加元素。</desc>
    <code><![CDATA[
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );
]]></code>
    <html><![CDATA[
<p>Hello</p>
<span id="a">Hello Again</span>
]]></html>
  </example>
  <category slug="traversing/miscellaneous-traversal"/>
  <category slug="version/1.0"/>
  <category slug="version/1.4"/>
</entry>

<?xml version="1.0"?>
<entry type="method" name="addClass" return="jQuery">
  <title>.addClass()</title>
  <signature>
    <added>1.0</added>
    <argument name="className" type="String">
      <desc>为每个匹配元素的class属性增加一个或多个以空格分隔的class。</desc>
    </argument>
  </signature>
  <signature>
    <added>1.4</added>
    <argument name="function(index, currentClass)" type="Function">
      <desc>这个函数返回一个或多个用空格隔开的要增加的class。此函数接受表示元素在匹配集合中的索引位置的index参数，和代表已经存在的class的currentClass参数。在函数中<code>this</code>指向匹配元素集合中的当前元素。</desc>
    </argument>
  </signature>
  <desc>为每个匹配的元素添加一个或多个class。</desc>
  <longdesc>
    <p>值得注意的是这个方法不会替换任何一个class。它只是简单的添加一个class到元素上，即附加到已经存在的class之后。</p>
    <p>对所有匹配的元素可以一次添加多个用空格隔开的class，如下：</p>
    <pre><code>
$( "p" ).addClass( "myClass yourClass" );
    </code></pre>
    <p>This method is often used with <code>.removeClass()</code> to switch elements' classes from one to another, like so:</p>
    <pre><code>
$( "p" ).removeClass( "myClass noClass" ).addClass( "yourClass" );
    </code></pre>
    <p>这里，<code>myClass</code> 和 <code>noClass</code>在所有段落上被移除， 同时<code>yourClass</code>被添加。</p>
    <p>自 jQuery 1.4开始，<code>.addClass()</code>方法可以接受一个函数作为参数。</p>
    <pre><code>
$( "ul li" ).addClass(function( index ) {
  return "item-" + index;
});
    </code></pre>
    <p>给定一个有2个<code>&lt;li&gt;</code>元素的无序列表，在下面这个例子中，将在第一个<code>&lt;li&gt;</code>元素上加上"item-0" class，给第二个添加"item-1" class。</p>
  </longdesc>
  <example>
    <desc>为匹配的元素上加上"selected" class。</desc>
    <code><![CDATA[
$( "p" ).last().addClass( "selected" );
]]></code>
    <css><![CDATA[
  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: blue;
  }
  .highlight {
    background: yellow;
  }
]]></css>
    <html><![CDATA[
<p>Hello</p>
<p>and</p>
<p>Goodbye</p>
]]></html>
  </example>
  <example>
    <desc>在匹配的元素上加上"selected"和"highlight" class。</desc>
    <code><![CDATA[
$( "p:last" ).addClass( "selected highlight" );
]]></code>
    <css><![CDATA[
  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: red;
  }
  .highlight {
    background: yellow;
  }
]]></css>
    <html><![CDATA[
<p>Hello</p>
<p>and</p>
<p>Goodbye</p>
]]></html>
  </example>
  <example>
    <desc>给<code>.addClass()</code>传递一个函数作为参数，并为已经具有"red" class的div添加"green" class。</desc>
    <code><![CDATA[
$( "div" ).addClass(function( index, currentClass ) {
  var addedClass;

  if ( currentClass === "red" ) {
    addedClass = "green";
    $( "p" ).text( "There is one green div" );
  }

  return addedClass;
});
]]></code>
    <css><![CDATA[
  div {
    background: white;
  }
  .red {
    background: red;
  }
  .red.green {
    background: green;
  }
]]></css>
    <html><![CDATA[
 <div>This div should be white</div>
 <div class="red">This div will be green because it now has the "green" and "red" classes.
   It would be red if the addClass function failed.</div>
 <div>This div should be white</div>
 <p>There are zero green divs</p>
]]></html>
  </example>
  <category slug="attributes"/>
  <category slug="manipulation/class-attribute"/>
  <category slug="css"/>
  <category slug="version/1.0"/>
  <category slug="version/1.4"/>
</entry>
